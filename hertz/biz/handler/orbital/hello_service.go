// Code generated by hertz generator.

package orbital

import (
	"context"
	"encoding/json"
	"fmt"

	orbital "test4/hertz/biz/model/orbital"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/klog"
)

// Load Balancing Options
var helloServer0 = "127.0.0.1:43000"
var helloServer1 = "127.0.0.1:43001"

// HelloMethod .
// @router /hello [GET]
func HelloMethod(ctx context.Context, c *app.RequestContext) {

	var err error

	// Evaluating query string in the URL
	var req orbital.HelloRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	klog.Info("Passing through Hertz to Kitex")

	// Kitex's Generic Call Feature
	// path is the location of the thrift file governing this method
	path := "../idl/orbital.thrift"
	p, err := generic.NewThriftFileProvider(path)
	if err != nil {
		klog.Fatalf("New thrift file provider failed: %v", err)
	}

	g, err := generic.JSONThriftGeneric(p)
	if err != nil {
		klog.Fatalf("New map thrift generic failed: %v", err)
	}

	// "hello" is the service name
	cli, err := genericclient.NewClient("hello", g,
		client.WithHostPorts(helloServer0, helloServer1),
		client.WithLoadBalancer(lb))
	if err != nil {
		klog.Fatalf("New HTTP generic client failed: %v", err)
	}

	// "HelloMethod" is the method name
	// The last variable is not used in the function
	resp, err := cli.GenericCall(context.Background(), "HelloMethod", `{"Not": "Used"}`)

	// resp is a JSON string
	// type: interface{}
	// converting resp to string (interface{} --> string)
	s := resp.(string)

	// Unmarshalling of JSON string into Response struct (string --> Response struct)
	var response Response
	err = json.Unmarshal([]byte(s), &response)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// Printing on Hertz client
	reply := utils.H{response.Response: req.Name}
	c.JSON(consts.StatusOK, reply)

	klog.Info("Hertz: Request completed")
}

type Response struct {
	Response string `json:"ResponseBody"`
}
